import asyncio
from pyqiwip2p import QiwiP2P
from aiogram.dispatcher import FSMContext
from aiocryptopay.const import InvoiceStatus
from aiogram.utils.exceptions import Throttled
from aiocryptopay import AioCryptoPay, Networks
from aiogram import Bot, Dispatcher, executor, types
# from pyqiwip2p.types import QiwiCustomer, QiwiDatetime
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from config import *
from states import *
from bomber import *
from database import *
from keyboards import *

p2p = QiwiP2P(auth_key=QIWIP2P_TOKEN)
crypto = AioCryptoPay(token=CRYPTOPAY_TOKEN, network=Networks.MAIN_NET)
storage = MemoryStorage()
bot = Bot(token=TOKEN, parse_mode='html')
dp = Dispatcher(bot, storage=storage)

obj = Bomber()
# obj.loadServices()
ua_services_count = len(obj.servicesList[0])
ru_services_count = len(obj.servicesList[1])
all_services_count = ua_services_count + ru_services_count

subs = {
    80: 3,
    120: 7,
    200: 14,
    250: 21,
    300: 30,
    700: 90
}

async def anti_flood(*args, **kwargs):
    m = args[0]
    await m.answer('‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Ñ–ª—É–¥–∏—Ç–µ!')

@dp.message_handler(commands=['start'])
@dp.throttled(anti_flood, rate=1)
async def start(message: types.Message):
    await bot.send_sticker(message.from_user.id, 'CAACAgIAAxkBAAEJjSlkoEihmAAB4-w84tUzDBjiLWxsvewAAmQ6AALgo4IH_LAjcdV4gS0vBA')
    if not Users.user_exists(message.from_user.id):
        Users.create_user(message.from_user.id)
        await bot.send_message(logs_id, f'''<b>üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
üÜî:</b> <code>{message.from_user.id}</code>
<b>üîó –õ–∏–Ω–∫:</b> {message.from_user.get_mention()}''')
    await message.answer(f'''<b>üü™Welcome to the club!‚¨úÔ∏è
<i>–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–º:</i></b>''', reply_markup=start_keyboard(message.from_user.id))

@dp.message_handler(text='üëë –ê–¥–º–∏–Ω–∫–∞')
@dp.throttled(anti_flood, rate=1)
async def admin(message: types.Message):
    if message.from_user.id in aids:
        await message.answer(f'''<b>üëÆ‚Äç‚ôÇÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ:</b> <code>{Users.get_users_count()}</code>
<b>ü§µüèº‚Äç‚ôÇÔ∏è –° –¥–æ—Å—Ç—É–ø–æ–º:</b> <code>{Users.get_subs_count()}</code>
<b>üí£ –°–µ–π—á–∞—Å –∑–∞–ø—É—â–µ–Ω–æ –±–æ–º–±–µ—Ä–æ–≤:</b> <code>{Bombs.get_bombs_count()}</code>''', reply_markup=admin_keyboard())

@dp.message_handler(text='üßÆ –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é')
async def open_menu(message: types.Message):
    await message.answer('<b>üîØ –ú–µ–Ω—é:</b>', reply_markup=menu_keyboard(message.from_user.id))

@dp.callback_query_handler(text='bomber')
@dp.throttled(anti_flood, rate=1)
async def bomber(callback_query: types.CallbackQuery):
    await callback_query.message.delete()

    if not Users.have_sub(callback_query.from_user.id):
        await callback_query.message.answer(f'<b>‚ùóÔ∏è –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø!</b>', reply_markup=menu_keyboard(callback_query.from_user.id))
    else:
        if Bombs.get_bombs_count_by_id(callback_query.from_user.id) == 3:
            await callback_query.message.answer(f'<b>‚ùóÔ∏è –£ –≤–∞—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ 3 –±–æ–º–±–µ—Ä–∞! –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ü–∏–∫–ª–æ–≤.</b>', reply_markup=start_keyboard(message.from_user.id))
        else:
            await callback_query.message.answer(f'<b>üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±–µ–∑ +</b>', reply_markup=cancel_keyboard())
            await StartBomber.number.set()

@dp.message_handler(state=StartBomber.number)
@dp.throttled(anti_flood, rate=1)
async def bomber_1(message: types.Message, state: FSMContext):
    if not Users.have_sub(message.from_user.id):
        await state.finish()
        await message.answer(f'<b>‚ùóÔ∏è –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø!</b>', reply_markup=start_keyboard(message.from_user.id))
    else:
        number = message.text

        if (number.startswith('380') and len(number) == 12) or (number.startswith('7') and len(number) == 11):
            if Whitelist.in_whitelist(number):
                await state.finish()
                await message.answer(f'<b>‚ùóÔ∏è –ù–æ–º–µ—Ä –∑–∞—â–∏—â–µ–Ω. –ù–∞ –Ω–µ–≥–æ –Ω–µ–ª—å–∑—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ø–∞–º!</b>', reply_markup=start_keyboard(message.from_user.id))
                return

            async with state.proxy() as data:
                data['number'] = number

            await message.answer(f'<b>üü£ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤:</b>', reply_markup=cancel_keyboard())
            await StartBomber.next()
        else:
            await state.finish()
            await message.answer(f'<b>‚ùóÔ∏è –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–µ–∑ + –≤ –Ω–∞—á–∞–ª–µ –∏ –∏–º–µ—Ç—å –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã 7 –∏–ª 380!</b>', reply_markup=start_keyboard(message.from_user.id))

@dp.message_handler(state=StartBomber.iterations)
async def bomber_2(message: types.Message, state: FSMContext):
    if not Users.have_sub(message.from_user.id):
        await state.finish()
        await message.answer(f'<b>‚ùóÔ∏è –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø!</b>', reply_markup=start_keyboard(message.from_user.id))
    else:
        iterations = message.text

        if (iterations.isdigit() and int(iterations) < 100 and int(iterations) > 0):
            async with state.proxy() as data:
                number = data['number']
                data['iterations'] = int(iterations)

            await state.finish()
            bomb_id = ''.join([random.choice(list('QAZWSXEDCRFVTGBYHNUJMIKOLP1029384756')) for x in range(6)])
            await bot.send_message(logs_id, f'''<b>üí£ <a href="tg://user?id={message.from_user.id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> (@{message.from_user.username}) –∑–∞–∫–∞–∑–∞–ª –±–æ–º–±–µ—Ä –Ω–∞ –Ω–æ–º–µ—Ä: {number}

üåÄ –¶–∏–∫–ª—ã: {iterations}</b>''')
            await message.answer(f'''<b>‚úùÔ∏è –ë–æ–º–±–µ—Ä –∑–∞–ø—É—â–µ–Ω! #{bomb_id}

üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <code>{number}</code>
<b>üü£ –ö–æ–ª-–≤–æ —Ü–∏–∫–ª–æ–≤:</b> <code>{iterations}</code>

<b>‚ùóÔ∏è –í–∞–º –ø—Ä–∏–π–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Å–ø–∞–º–∞!</b>''', reply_markup=stop_bomber_keyboard(bomb_id))
            Bombs.create_bomb(message.from_user.id, bomb_id, number, int(iterations))
            if number.startswith('380'):
                await asyncio.create_task(obj.runUA(bot, bomb_id, Bombs))
            elif number.startswith('7'):
                await asyncio.create_task(obj.runRU(bot, bomb_id, Bombs))
        else:
            await state.finish()
            await message.answer(f'<b>‚ùóÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏ –Ω–µ –±—ã—Ç—å –±–æ–ª—å—à–µ 100!</b>', reply_markup=start_keyboard(message.from_user.id))

@dp.callback_query_handler(text_startswith='buy_access:')
@dp.throttled(anti_flood, rate=1)
async def buy_access_payment(callback_query: types.CallbackQuery):
    await callback_query.message.delete()

    if not Users.have_sub(callback_query.from_user.id):
        amount = int(callback_query.data.split(':')[2])
        days = subs[amount]

        if callback_query.data.split(':')[1] == "cryptobot":
            amount_final = amount / curse_usdt
            invoice = await crypto.create_invoice(asset='USDT', amount=amount_final)
            url = invoice.pay_url

            await callback_query.message.answer(f'''<b>üíñ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø - –æ–ø–ª–∞—Ç–∏—Ç–µ —Å—á—ë—Ç –Ω–∞ {amount} RUB ({amount_final} USDT)

üìå –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {url}
‚ùóÔ∏è –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"</b>''', reply_markup=check_payment_keyboard(invoice.invoice_id, callback_query.data.split(':')[1], days))
        else:
            bill = p2p.bill(amount=amount, lifetime=15, comment="–ü–æ–∫—É–ø–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É")
            url = bill.pay_url

            await callback_query.message.answer(f'''<b>üíñ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø - –æ–ø–ª–∞—Ç–∏—Ç–µ —Å—á—ë—Ç –Ω–∞ {amount} RUB

üìå –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {url}
‚ùóÔ∏è –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"</b>''', reply_markup=check_payment_keyboard(bill.bill_id, callback_query.data.split(':')[1], days))
    else:
        await callback_query.message.answer(f'<b>‚ùóÔ∏è –£ –≤–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏:</b>', reply_markup=start_keyboard(message.from_user.id))

@dp.callback_query_handler(text_startswith='buy_access_time:')
async def buy_access_time(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    await callback_query.message.answer(f'<b>üëæ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –ø–æ–∫—É–ø–∫–∏ –¥–æ—Å—Ç—É–ø–∞:</b>', reply_markup=methods_pay_keyboard(callback_query.data.split(':')[1]))

@dp.callback_query_handler(text='buy_access')
async def buy_access(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    await callback_query.message.answer(f'<b>üëæ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏:</b>', reply_markup=time_sub_keyboard())

@dp.callback_query_handler(text_startswith='stop_bomber:')
async def stop_bomber(callback_query: types.CallbackQuery):
    Bombs.get_bomb(callback_query.data.split(':')[1]).delete_instance()
    await callback_query.message.answer(f'<b>‚úÖ –ë–æ–º–±–µ—Ä –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>', reply_markup=menu_keyboard(callback_query.from_user.id))

@dp.callback_query_handler(text_startswith='delete_whitelist:')
async def stop_bomber(callback_query: types.CallbackQuery):
    Whitelist.get_whitelist(callback_query.data.split(':')[1]).delete_instance()
    await callback_query.message.answer(f'<b>‚úÖ –ù–æ–º–µ—Ä –±—ã–ª —É–±—Ä–∞–Ω!</b>', reply_markup=menu_keyboard(callback_query.from_user.id))




@dp.callback_query_handler(text='add_whitelist')
@dp.throttled(anti_flood, rate=1)
async def add_whitelist(callback_query: types.CallbackQuery):
    await callback_query.message.delete()

    if not Users.have_sub(callback_query.from_user.id):
        await callback_query.message.answer(f'<b>‚ùóÔ∏è –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø!</b>', reply_markup=menu_keyboard(callback_query.from_user.id))
    else:
        if Whitelist.get_whitelist_count_by_id(callback_query.from_user.id) == 5:
            await callback_query.message.answer(f'<b>‚ùóÔ∏è –£ –≤–∞—Å —É–∂–µ –∑–∞—â–∏—â–µ–Ω–æ 5 –Ω–æ–º–µ—Ä–∞! –£–¥–∞–ª–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π.</b>', reply_markup=start_keyboard(message.from_user.id))
        else:
            await callback_query.message.answer(f'<b>üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±–µ–∑ +</b>', reply_markup=cancel_keyboard())
            await AddWhitelist.number.set()

@dp.message_handler(state=AddWhitelist.number)
@dp.throttled(anti_flood, rate=1)
async def add_whitelist_1(message: types.Message, state: FSMContext):
    if not Users.have_sub(message.from_user.id):
        await state.finish()
        await message.answer(f'<b>‚ùóÔ∏è –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø!</b>', reply_markup=start_keyboard(message.from_user.id))
    else:
        number = message.text

        if (number.startswith('380') and len(number) == 12) or (number.startswith('7') and len(number) == 11):
            if Whitelist.in_whitelist(number):
                await state.finish()
                await message.answer(f'<b>‚ùóÔ∏è –ù–æ–º–µ—Ä —É–∂–µ –∑–∞—â–∏—â–µ–Ω. –ï–≥–æ –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å!</b>', reply_markup=start_keyboard(message.from_user.id))
                return

            async with state.proxy() as data:
                data['number'] = number

            Whitelist.create_whitelist(message.from_user.id, number)
            await message.answer(f'<b>‚úÖ –ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞—â–∏—â–µ–Ω.</b>', reply_markup=whitelist_keyboard(message.from_user.id))
            await state.finish()
        else:
            await state.finish()
            await message.answer(f'<b>‚ùóÔ∏è –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–µ–∑ + –≤ –Ω–∞—á–∞–ª–µ –∏ –∏–º–µ—Ç—å –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã 7 –∏–ª 380!</b>', reply_markup=start_keyboard(message.from_user.id))




@dp.callback_query_handler(text='active_bombers')
@dp.throttled(anti_flood, rate=1)
async def active_bombers(callback_query: types.CallbackQuery):
    await callback_query.message.delete()

    if not Users.have_sub(callback_query.from_user.id):
        await callback_query.message.answer(f'<b>‚ùóÔ∏è –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø!</b>', reply_markup=menu_keyboard(callback_query.from_user.id))
    else:
        if Bombs.get_bombs_count_by_id(callback_query.from_user.id) == 0:
            await callback_query.message.answer(f'<b>‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –±–æ–º–±–µ—Ä–æ–≤!</b>', reply_markup=menu_keyboard(callback_query.from_user.id))
        else:
            await callback_query.message.answer(f'<b>üõë –í—ã–±–µ—Ä–∏—Ç–µ –±–æ–º–±–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å:</b>', reply_markup=active_bombers_keyboard(callback_query.from_user.id))

@dp.callback_query_handler(text='whitelist')
@dp.throttled(anti_flood, rate=1)
async def whitelist(callback_query: types.CallbackQuery):
    await callback_query.message.delete()

    if not Users.have_sub(callback_query.from_user.id):
        await callback_query.message.answer(f'<b>‚ùóÔ∏è –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø!</b>', reply_markup=menu_keyboard(callback_query.from_user.id))
    else:
        await callback_query.message.answer(f'<b>üõë –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å –∏–∑ –∑–∞—â–∏—Ç—ã:</b>', reply_markup=whitelist_keyboard(callback_query.from_user.id))

@dp.callback_query_handler(text='profile')
@dp.throttled(anti_flood, rate=1)
async def profile(callback_query: types.CallbackQuery):
    await callback_query.message.delete()

    if not Users.have_sub(callback_query.from_user.id):
        await callback_query.message.answer(f'''<b>üÜî –í–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:</b> <code>{callback_query.from_user.id}</code>

<b>üíñ –î–æ—Å—Ç—É–ø:</b> <code>–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</code>''', reply_markup=menu_keyboard(callback_query.from_user.id))
    else:
        await callback_query.message.answer(f'''<b>üÜî –í–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:</b> <code>{callback_query.from_user.id}</code>

<b>üíñ –î–æ—Å—Ç—É–ø –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤:</b> <code>{Users.sub_until(callback_query.from_user.id)}</code>''', reply_markup=menu_keyboard(callback_query.from_user.id))

@dp.callback_query_handler(text='helper')
@dp.throttled(anti_flood, rate=1)
async def helper(callback_query: types.CallbackQuery):
    await callback_query.message.delete()

    await callback_query.message.answer(f'''<b>üîØ –°–∞–π—Ç–æ–≤ –≤ –±–∞–∑–µ:</b> <code>{all_services_count} (üá∫üá¶{ua_services_count} / üá∑üá∫{ru_services_count})</code>

<b>‚úùÔ∏è –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ–º–±–µ—Ä–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ–º–±–µ—Ä"

üìû –ó–∞—Ç–µ–º –≤–≤–æ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –±–æ–º–±–µ—Ä (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–¥–æ–≤ 7, 380)

üü£ –ó–∞—Ç–µ–º —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤. –¶–∏–∫–ª –±—É–¥–µ—Ç –¥–ª–∏—Ç—Å—è –æ–∫–æ–ª–æ 3-5 –º–∏–Ω—É—Ç.

‚ùóÔ∏è –•–æ—á—É –ø–æ–¥–º–µ—Ç–∏—Ç—å —Ç–æ, —á—Ç–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å! 

‚ÅâÔ∏è –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ –ø–∏—à–∏—Ç–µ @axolotl_admin</b>''', reply_markup=menu_keyboard(callback_query.from_user.id))

@dp.callback_query_handler(text='information')
@dp.throttled(anti_flood, rate=1)
async def information(callback_query: types.CallbackQuery):
    await callback_query.message.delete()

    await callback_query.message.answer(f'''<b>‚õë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @axolotl_admin
‚õ© –ö–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏: @axolotl_admin</b>''', reply_markup=menu_keyboard(callback_query.from_user.id))

@dp.callback_query_handler(text='back')
@dp.throttled(anti_flood, rate=1)
async def back(callback_query: types.CallbackQuery):
    await callback_query.message.delete()

    await bot.send_sticker(message.from_user.id, 'CAACAgIAAxkBAAEJjSlkoEihmAAB4-w84tUzDBjiLWxsvewAAmQ6AALgo4IH_LAjcdV4gS0vBA')
    await callback_query.message.answer(f'''<b>üü™Welcome to the Axolotl Bomber!‚¨úÔ∏è
<i>–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–º:</i></b>''', reply_markup=start_keyboard(message.from_user.id))


@dp.callback_query_handler(text_startswith='check_cryptobot:')
@dp.throttled(anti_flood, rate=1)
async def check_cryptobot(callback_query: types.CallbackQuery):
    if not Users.have_sub(callback_query.from_user.id):
        invoices = await crypto.get_invoices(invoice_ids=callback_query.data.split(':')[1])
        if invoices[0].status == InvoiceStatus.PAID:
            await callback_query.message.delete()
            Users.give_sub(callback_query.from_user.id, int(callback_query.data.split(':')[2]))
            await bot.send_message(logs_id, f'''<b>üí£ <a href="tg://user?id={message.from_user.id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> (@{message.from_user.username}) –∫—É–ø–∏–ª –¥–æ—Å—Ç—É–ø

üíà –ú–µ—Ç–æ–¥: CryptoBot</b>''')
            await callback_query.message.answer(f'<b>üíó –î–æ—Å—Ç—É–ø –æ–ø–ª–∞—á–µ–Ω. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!</b>', reply_markup=menu_keyboard(callback_query.from_user.id))
        elif invoices[0].status == InvoiceStatus.ACTIVE:
            await callback_query.answer(f'‚ùóÔ∏è –î–æ—Å—Ç—É–ø –Ω–µ –æ–ø–ª–∞—á–µ–Ω!')
        else:
            await callback_query.message.delete()
            await callback_query.message.answer(f'<b>üíò –ü–ª–∞—Ç—ë–∂ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω!</b>', reply_markup=menu_keyboard(callback_query.from_user.id))
    else:
        await callback_query.message.answer(f'<b>‚ùóÔ∏è –£ –≤–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏:</b>', reply_markup=menu_keyboard(callback_query.from_user.id))

@dp.callback_query_handler(text_startswith='check_qiwi:')
@dp.throttled(anti_flood, rate=1)
async def check_qiwi(callback_query: types.CallbackQuery):
    if not Users.have_sub(callback_query.from_user.id):
        status = p2p.check(callback_query.data.split(':')[1]).status
        if status == 'PAID':
            await callback_query.message.delete()
            Users.give_sub(callback_query.from_user.id, int(callback_query.data.split(':')[2]))
            await bot.send_message(logs_id, f'''<b>üí£ <a href="tg://user?id={message.from_user.id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> (@{message.from_user.username}) –∫—É–ø–∏–ª –¥–æ—Å—Ç—É–ø

üíà –ú–µ—Ç–æ–¥: ü•ù QiWi</b>''')
            await callback_query.message.answer(f'<b>üíó –î–æ—Å—Ç—É–ø –æ–ø–ª–∞—á–µ–Ω. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!</b>', reply_markup=menu_keyboard(callback_query.from_user.id))
        elif status == 'WAITING':
            await callback_query.answer(f'‚ùóÔ∏è –î–æ—Å—Ç—É–ø –Ω–µ –æ–ø–ª–∞—á–µ–Ω!')
        else:
            await callback_query.message.delete()
            await callback_query.message.answer(f'<b>üíò –ü–ª–∞—Ç—ë–∂ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω!</b>', reply_markup=menu_keyboard(callback_query.from_user.id))
    else:
        await callback_query.message.answer(f'<b>‚ùóÔ∏è –£ –≤–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏:</b>', reply_markup=menu_keyboard(callback_query.from_user.id))


@dp.callback_query_handler(text='dump')
@dp.throttled(anti_flood, rate=1)
async def dump(callback_query: types.CallbackQuery):
    if callback_query.from_user.id in aids:
        await bot.send_document(callback_query.from_user.id, open('bot.db', 'rb'))

@dp.callback_query_handler(text='mail')
@dp.throttled(anti_flood, rate=1)
async def mail(callback_query: types.CallbackQuery):
    if callback_query.from_user.id in aids:
        await Mail.photo.set()
        await callback_query.message.answer('''<b>üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Å—ã–ª–∫–∏

<i>–î–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –Ω–∞–ø–∏—à–∏—Ç–µ "-"</i></b>''')

@dp.message_handler(content_types=['photo'], state=Mail.photo)
async def mail2(message: types.Message, state: FSMContext):
    if message.from_user.id in aids:
        async with state.proxy() as data:
            try:
                data['photo'] = message.photo[0].file_id
            except:
                data['photo'] = None
        
        await Mail.next()
        await message.answer('''<b>‚úâÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏

<i>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–º–µ—Ç–∫–∏ "HTML"</i></b>''')

@dp.message_handler(state=Mail.photo)
async def mail2(message: types.Message, state: FSMContext):
    if message.from_user.id in aids:
        async with state.proxy() as data:
            try:
                data['photo'] = message.photo[0].file_id
            except:
                data['photo'] = None
        
        await Mail.next()
        await message.answer('''<b>‚úâÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏

<i>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–º–µ—Ç–∫–∏ "HTML"</i></b>''')

@dp.message_handler(state=Mail.description)
async def mail3(message: types.Message, state: FSMContext):
    if message.from_user.id in aids:
        async with state.proxy() as data:
            data['description'] = message.text 

            g, e = 0, 0
            for user in Users.get_users():
                try:
                    await bot.send_photo(user.UID, data['photo'], data['description'], parse_mode='html')
                    g += 1
                except:
                    try:
                        await bot.send_message(user.UID, data['description'], parse_mode='html')
                        g += 1
                    except:
                        e += 1

        await state.finish()
        await message.answer(f'''<b>‚è± –†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!

üëç –ü–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b> <code>{g}</code>
<b>üëé –ù–µ –ø–æ–ª—É—á–∏–ª–∏:</b> <code>{e}</code>''', reply_markup=admin_keyboard())

@dp.callback_query_handler(text='givesub')
@dp.throttled(anti_flood, rate=1)
async def givesub(callback_query: types.CallbackQuery):
    if callback_query.from_user.id in aids:
        await callback_query.message.answer('<b>üÜî –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø:</b>', reply_markup=cancel_keyboard())
        await GiveSub.id.set()

@dp.callback_query_handler(text='takesub')
@dp.throttled(anti_flood, rate=1)
async def takesub(callback_query: types.CallbackQuery):
    if callback_query.from_user.id in aids:
        await callback_query.message.answer('<b>üÜî –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø:</b>', reply_markup=cancel_keyboard())
        await TakeSub.id.set()

@dp.message_handler(state=GiveSub.id)
async def givesub2(message: types.Message, state: FSMContext):
    if message.from_user.id in aids:
        async with state.proxy() as data:
            data['id'] = int(message.text)
        
        await message.answer('<b>üï∞ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞:</b>', reply_markup=cancel_keyboard())
        await GiveSub.next()

@dp.message_handler(state=GiveSub.days)
async def givesub3(message: types.Message, state: FSMContext):
    if message.from_user.id in aids:
        async with state.proxy() as data:
            data['days'] = int(message.text)
            id = data['id']
            days = data['days']
        
        Users.give_sub(id, days)
        await bot.send_message(id, f'<b>üíó –í–∞–º –≤—ã–¥–∞–Ω –¥–æ—Å—Ç—É–ø –Ω–∞</b> <code>{days}</code> <b>–¥–Ω–µ–π!</b>', reply_markup=start_keyboard(message.from_user.id))
        await state.finish()
        await message.answer('<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–¥–∞–Ω –¥–æ—Å—Ç—É–ø!</b>', reply_markup=admin_keyboard())

@dp.message_handler(state=TakeSub.id)
async def takesub2(message: types.Message, state: FSMContext):
    if message.from_user.id in aids:
        async with state.proxy() as data:
            data['id'] = int(message.text)
            id = data['id']
        
        Users.take_sub(id)
        await bot.send_message(id, f'<b>üíî –£ –≤–∞—Å –∑–∞–±—Ä–∞–ª–∏ –¥–æ—Å—Ç—É–ø!</b>', reply_markup=start_keyboard(message.from_user.id))
        await state.finish()
        await message.answer('<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–±—Ä–∞–ª–∏ –¥–æ—Å—Ç—É–ø!</b>', reply_markup=admin_keyboard())

@dp.message_handler(text='‚ùå –û—Ç–º–µ–Ω–∞', state='*')
@dp.throttled(anti_flood, rate=1)
async def cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await bot.send_sticker(message.from_user.id, 'CAACAgIAAxkBAAEJjSlkoEihmAAB4-w84tUzDBjiLWxsvewAAmQ6AALgo4IH_LAjcdV4gS0vBA')
    await message.answer(f'''<b>üü™Welcome to the club
<i>–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–º:</i></b>''', reply_markup=start_keyboard(message.from_user.id))

async def restart_bombers():
    for bomb in Bombs.get_bombs():
        number = bomb.NUM
        bomb_id = bomb.BID

        if number.startswith('380'):
            await asyncio.create_task(obj.runUA(bot, bomb_id, Bombs))
        elif number.startswith('7'):
            await asyncio.create_task(obj.runRU(bot, bomb_id, Bombs))

async def on_startup(dp):
    # await asyncio.create_task(restart_bombers())
    for curse in await crypto.get_exchange_rates():
        if curse.source == 'USDT' and curse.target == 'RUB':
            global curse_usdt
            curse_usdt = curse.rate

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)